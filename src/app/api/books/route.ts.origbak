// src/app/api/books/route.ts
import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error("Missing SUPABASE env vars on server. Ensure NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are set.");
  throw new Error("Missing SUPABASE env vars on server.");
}

const serverSupabase = createClient(supabaseUrl, serviceRoleKey, { auth: { persistSession: false } });

type IncomingBookBody = { title?: unknown; author?: unknown; status?: unknown };

export async function GET() {
  try {
    const { data, error } = await serverSupabase
      .from("books")
      .select("*")
      .order("created_at", { ascending: false });

    if (error) {
      console.error("Supabase server error (GET /api/books):", error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    const rows = Array.isArray(data) ? data : [];
    return NextResponse.json(rows, { status: 200 });
  } catch (err: unknown) {
    console.error("Unexpected error in /api/books GET:", err);
    return NextResponse.json({ error: String(err) }, { status: 500 });
  }
}

export async function POST(req: Request) {
  try {
    const ct = req.headers.get("content-type") ?? "";
    if (!ct.includes("application/json")) {
      return NextResponse.json({ error: "Expected application/json" }, { status: 415 });
    }

    const raw = (await req.json()) as IncomingBookBody | null;
    if (!raw || typeof raw !== "object") {
      return NextResponse.json({ error: "Invalid body" }, { status: 400 });
    }

    if (!raw.title || typeof raw.title !== "string") {
      return NextResponse.json({ error: "Missing or invalid title" }, { status: 400 });
    }

    const payload = {
      title: raw.title,
      author: typeof raw.author === "string" ? raw.author : null,
      status:
        raw.status === "reading" || raw.status === "completed" || raw.status === "wishlist"
          ? String(raw.status)
          : "wishlist",
    };

    const insertRes = await serverSupabase.from("books").insert([payload]).select();

    if (insertRes.error) {
      console.error("Insert error (POST /api/books):", insertRes.error);
      return NextResponse.json({ error: insertRes.error.message }, { status: 500 });
    }

    return NextResponse.json(insertRes.data ?? [], { status: 201 });
  } catch (err: unknown) {
    console.error("Unexpected error in /api/books POST:", err);
    return NextResponse.json({ error: String(err) }, { status: 500 });
  }
}
